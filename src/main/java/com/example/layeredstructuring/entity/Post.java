package com.example.layeredstructuring.entity;

import lombok.Builder;
import org.hibernate.annotations.Type;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.HashSet;
import java.util.Set;


@Table(name="post")
@Entity /*hibernate jpa entity*/
@Builder
public class Post {

    @Column (name="post_id")
    @Id @GeneratedValue
    private Integer post_id;

    /**
     * The id for the user who has posted this message. We will assume that this is provided by the front-end of this
     * application.
     */

    @ManyToOne
    @JoinColumn(name = "posted_by")
    @NotNull
    private UserAccount posted_by;

    /**
     * The title for this post- eg "Lakeville Living!". Must be not blank
     */
    @Column (name="post_title")
    @NotNull
    private String post_title;

    /**
     * The text for this post- eg "this is my first post!". Must be not blank
     */
    @Column (name="post_text")
    @NotNull
    @Lob
    @Type(type = "org.hibernate.type.TextType")
    private String post_text;

    /**
     * The text for this post- eg "this is my first post!". Must be not blank
     */
    @Column (name="post_summary")
    @NotNull
    private String post_summary;

    /**
     * The epoch time when this tweet was posted (number of seconds since Jan 1, 1970). Longs are large enough
     * to store this number. We will assume that this number is provided by the front-end of this application.
     */
    @Column (name="time_posted_epoch")
    private Long time_posted_epoch;

    /**
     * The epoch time when this tweet was updated (number of seconds since Jan 1, 1970). Longs are large enough
     * to store this number. We will assume that this number is provided by the front-end of this application.
     */
    @Column (name="time_updated_epoch")
    private Long time_updated_epoch;

    @OneToMany(mappedBy = "post", cascade = CascadeType.REMOVE)
    private Set<Comment> comments = new HashSet<>();


    /**
     * A default, no-args constructor, as well as correctly formatted getters and setters, are needed for
     * Jackson Objectmapper to work.
     */
    public Post(){
    }

    public Post(String post_title) {
        this.post_title = post_title;
    }
    /**
     * When posting a new message, the id can be generated by the database. In that case, a constructor without
     * message_id is needed.
     * @param posted_by
     * @param post_title
     * @param post_text
     * @param post_summary
//     * @param time_posted_epoch
//     * @param time_updated_epoch
     */
    public Post(UserAccount posted_by, String post_title, String post_text, String post_summary,
                Long time_posted_epoch, Long time_updated_epoch, Set<Comment> comments) {
        this.posted_by = posted_by;
        this.post_title = post_title;
        this.post_text = post_text;
        this.post_summary = post_summary;
        this.time_posted_epoch = time_posted_epoch;
        this.time_updated_epoch = time_updated_epoch;
        this.comments = comments;
    }
    /**
     * Whem retrieving a message from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param post_id
     * @param post_title
     * @param post_text
     * @param post_summary
//     * @param time_posted_epoch
//     * @param time_updated_epoch
     */
    public Post(Integer post_id, UserAccount posted_by, String post_title, String post_text,
                String post_summary, Long time_posted_epoch, Long time_updated_epoch, Set<Comment> comments) {
        this.post_id = post_id;
        this.posted_by = posted_by;
        this.post_title = post_title;
        this.post_text = post_text;
        this.post_summary = post_summary;
        this.time_posted_epoch = time_posted_epoch;
        this.time_updated_epoch = time_updated_epoch;
        this.comments = comments;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return post_id
     */
    public Integer getPost_id() {
        return post_id;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param post_id
     */
    public void setPost_id(Integer post_id) {
        this.post_id = post_id;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return posted_by
     */
    public UserAccount getPosted_by() {
        return posted_by;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param posted_by
     */
    public void setPosted_by(UserAccount posted_by) {
        this.posted_by = posted_by;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return post_title
     */
    public String getPost_title() {
        return post_title;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param post_title
     */
    public void setPost_title(String post_title) {
        this.post_title = post_title;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return post_text
     */
    public String getPost_text() {
        return post_text;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param post_text
     */
    public void setPost_text(String post_text) {
        this.post_text = post_text;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return post_summary
     */
    public String getPost_summary() {
        return post_summary;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @param post_summary
     */
    public void setPost_summary(String post_summary) {
        this.post_summary = post_summary;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return time_posted_epoch
     */
    public Long getTime_posted_epoch() {
        return time_posted_epoch;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
//     * @param time_posted_epoch
     */
//    @PrePersist
    protected void setTime_posted_epoch() {
        this.time_posted_epoch = System.currentTimeMillis();
        this.time_updated_epoch = System.currentTimeMillis();
    }

    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
     * @return time_updated_epoch
     */
    public Long getTime_updated_epoch() {
        return time_updated_epoch;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work. You may use them as well.
//     * @param time_updated_epoch
     */
//    @PreUpdate
    protected void setTime_updated_epoch() {
        this.time_updated_epoch = System.currentTimeMillis();
    }

    public Set<Comment> getComments() {
        return comments;
    }

    public void setComments(Set<Comment> comments) {
        this.comments = comments;
    }
    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     * @param obj the other object.
     * @return true if obj is equal to this object.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Post other = (Post) obj;
        if (post_id == null) {
            if (other.post_id != null)
                return false;
        } else if (!post_id.equals(other.post_id))
            return false;
        if (post_title == null) {
            if (other.post_title != null)
                return false;
        } else if (!post_title.equals(other.post_title))
            return false;
        if (post_text == null) {
            if (other.post_text != null)
                return false;
        } else if (!post_text.equals(other.post_text))
            return false;
        if (posted_by == null) {
            if (other.posted_by != null)
                return false;
        } else if (!posted_by.equals(other.posted_by))
            return false;
        if (time_posted_epoch == null) {
            if (other.time_posted_epoch != null)
                return false;
        } else if (!time_posted_epoch.equals(other.time_posted_epoch))
            return false;
        if (time_updated_epoch == null) {
            if (other.time_updated_epoch != null)
                return false;
        } else if (!time_updated_epoch.equals(other.time_updated_epoch))
            return false;
        return true;
    }

    /**
     * Overriding the default toString() method allows for easy debugging.
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "Post{" +
          "post_id=" + post_id +
          ", posted_by=" + posted_by +
          ", post_title='" + post_title + '\'' +
          ", post_text='" + post_text + '\'' +
          ", post_summary='" + post_summary + '\'' +
          ", time_posted_epoch=" + time_posted_epoch +
          ", time_updated_epoch=" + time_updated_epoch +
          '}';
    }

}